// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  admin_id Int     @id @default(autoincrement())
  name     String
  email    String? @unique
  password String?
}

model Member {
  member_id            Int           @id @default(autoincrement())
  name                 String
  email                String?       @unique
  password             String?
  date_of_birth        DateTime
  medicare_number      String?
  medicare_irn         String?
  medicare_expiry_date DateTime?
  gender               String
  phoneNo              String?
  emergency_phoneNo    String?
  emergency_contact    String?
  next_of_kin          String?
  nok_name             String?
  nok_phoneNo          String?
  nok_email            String?
  nok_relationship     String?
  mailing_address      String
  billing_address      String?
  allergies_or_diet    String?
  allergies            String?
  medical_conditions   String?
  dietary_restrictions String? 
  current_medications  String?
  general_practitioner String?
  appointments         Appointment[]
}

model Staff {
  staff_id            Int           @id @default(autoincrement())
  name                String
  lname               String?
  email               String?       @unique
  password            String?
  contact_information String
  phoneNo             String?
  mailing_address     String?
  billing_address     String?
  emergency_contact   String?
  date_of_birth       DateTime?
  gender              String?
  qualifications      String?
  role                String?
  availability        String?
  appointments        Appointment[]
}

model Service {
  service_id   Int           @id @default(autoincrement())
  service_type String
  duration     String
  description  String
  appointments Appointment[]
}

model Facility {
  facility_id        Int           @id @default(autoincrement())
  room_number        String
  occupancy_status   String
  reservation_length String?
  date_reserved      DateTime?
  appointments       Appointment[]
}

model Appointment {
  appointment_id   Int       @id @default(autoincrement())
  member_id        Int
  staff_id         Int
  service_id       Int
  facility_id      Int
  appointment_date DateTime?
  appointment_time String?
  notes            String?
  member   Member   @relation(fields: [member_id], references: [member_id], onUpdate: Cascade, onDelete: Cascade)
  staff    Staff    @relation(fields: [staff_id], references: [staff_id], onUpdate: Cascade, onDelete: Cascade)
  service  Service  @relation(fields: [service_id], references: [service_id], onUpdate: Cascade, onDelete: Cascade)
  facility Facility @relation(fields: [facility_id], references: [facility_id], onUpdate: Cascade, onDelete: Cascade)
}

model Inventory {
  inventory_id   Int         @id @default(autoincrement())
  medication_id  Int?
  quantity       Int
  category       String?
  name           String?
  supplier_name   String?
  last_restocked DateTime?
  medication     Medication? @relation(fields: [medication_id], references: [medication_id], onUpdate: Cascade, onDelete: Cascade)
}

model Medication {
  medication_id   Int         @id @default(autoincrement())
  medication_name String
  dosage_form     String
  expiration_date DateTime
  Inventory       Inventory[]
}
